USE ecommerce_db;
-- Count total customers
SELECT COUNT(*) AS total_customers
FROM Customers;

-- Count total products available
SELECT COUNT(product_id) AS total_products
FROM Products;

-- Find average product price
SELECT AVG(price) AS average_price
FROM Products;

-- Find maximum and minimum product price
SELECT MAX(price) AS highest_price, MIN(price) AS lowest_price
FROM Products;

-- Calculate total stock value (price × stock)
SELECT SUM(price * stock) AS total_inventory_value
FROM Products;
-- Total number of orders placed by each customer
SELECT c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Total revenue per customer
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Total sales (quantity × price) per product
SELECT p.product_name, SUM(od.quantity * od.price) AS total_sales
FROM Products p
JOIN Order_Details od ON p.product_id = od.product_id
GROUP BY p.product_name;

-- Average order value per customer
SELECT c.first_name, AVG(o.total_amount) AS avg_order_value
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.first_name;
-- Customers who spent more than ₹30,000
SELECT c.first_name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.first_name
HAVING total_spent > 30000;

-- Products with total sales above ₹20,000
SELECT p.product_name, SUM(od.quantity * od.price) AS total_sales
FROM Products p
JOIN Order_Details od ON p.product_id = od.product_id
GROUP BY p.product_name
HAVING total_sales > 20000;
